using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Media;
using Wpf.Ui.Controls;
using SyncFlow.ViewModels;
using SyncFlow.Services;
using SyncFlow.Repositories;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using SyncFlow.Models;
using Button = System.Windows.Controls.Button;
using TextBlock = System.Windows.Controls.TextBlock;
using Brush = System.Windows.Media.Brush;
using Binding = System.Windows.Data.Binding;

namespace SyncFlow.Views
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : FluentWindow
    {
        private readonly MainViewModel _viewModel;
        private readonly IDialogService _dialogService;
        private readonly IThemeService _themeService;
        private readonly IServiceProvider _serviceProvider;
        private readonly AppSettings _appSettings;
        private readonly IProfileService _profileService;

        // Navigation elements are automatically generated by XAML Name attributes

        public MainWindow(
            IProfileService profileService,
            ITransferService transferService,
            IVerificationService verificationService,
            IDialogService dialogService,
            IThemeService themeService,
            AppSettings appSettings,
            IServiceProvider serviceProvider)
        {
            InitializeComponent();

            _dialogService = dialogService ?? throw new ArgumentNullException(nameof(dialogService));
            _themeService = themeService ?? throw new ArgumentNullException(nameof(themeService));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            _appSettings = appSettings ?? throw new ArgumentNullException(nameof(appSettings));
            _profileService = profileService ?? throw new ArgumentNullException(nameof(profileService));

            // Create and set the MainViewModel
            var enhancedTransferService = serviceProvider.GetRequiredService<IEnhancedTransferService>();
            var logger = serviceProvider.GetService<ILogger<MainViewModel>>();
            
            _viewModel = new MainViewModel(
                profileService,
                transferService,
                enhancedTransferService,
                verificationService,
                dialogService,
                logger);

            _viewModel.EditProfileRequested += OnEditProfileRequested;
            _viewModel.OpenSettingsRequested += OnOpenSettingsRequested;

            DataContext = _viewModel;

            // Apply initial theme and visual effects
            _themeService.ApplyTheme(_appSettings.IsDarkMode ? "Dark" : "Light");
            
            // Load profiles on window loaded
            Loaded += async (s, e) =>
            {
                await _viewModel.LoadProfilesAsync();
                // Apply visual effects after window is fully loaded
                _themeService.ApplyVisualEffects();
            };
        }

        private void OnEditProfileRequested(object? sender, ProfileViewModel profileViewModel)
        {
            // Create or get the profile editor window
            var editorWindow = new ProfileEditorWindow(profileViewModel.Profile.Clone(), _dialogService)
            {
                Owner = this,
                WindowStartupLocation = WindowStartupLocation.CenterOwner
            };

            if (editorWindow.ShowDialog() == true && editorWindow.EditedProfile != null)
            {
                // Save the edited profile
                _ = _viewModel.SaveProfileAsync(editorWindow.EditedProfile);
            }
        }

        private void OnOpenSettingsRequested(object? sender, EventArgs e)
        {
            // Navigate to settings section
            ShowSettingsContent();
        }

        private void OnNavigationClick(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.Tag is string section)
            {
                // Update navigation button states
                UpdateNavigationButtonStates(button);
                
                // Show appropriate content
                switch (section)
                {
                    case "Transfer":
                        ShowTransferContent();
                        break;
                    case "ImportExport":
                        ShowImportExportContent();
                        break;
                    case "Settings":
                        ShowSettingsContent();
                        break;
                    case "About":
                        ShowAboutContent();
                        break;
                }
            }
        }

        private void UpdateNavigationButtonStates(Button activeButton)
        {
            // Reset all navigation buttons
            TransferButton.IsEnabled = true;
            ImportExportButton.IsEnabled = true;
            SettingsButton.IsEnabled = true;
            AboutButton.IsEnabled = true;
            
            // Set active button
            activeButton.IsEnabled = false;
        }

        private void ShowTransferContent()
        {
            TransferContent.Visibility = Visibility.Visible;
            ImportExportContent.Visibility = Visibility.Collapsed;
            SettingsContent.Visibility = Visibility.Collapsed;
            AboutContent.Visibility = Visibility.Collapsed;
        }

        private void ShowImportExportContent()
        {
            TransferContent.Visibility = Visibility.Collapsed;
            ImportExportContent.Visibility = Visibility.Visible;
            SettingsContent.Visibility = Visibility.Collapsed;
            AboutContent.Visibility = Visibility.Collapsed;
        }

        private void ShowSettingsContent()
        {
            TransferContent.Visibility = Visibility.Collapsed;
            ImportExportContent.Visibility = Visibility.Collapsed;
            SettingsContent.Visibility = Visibility.Visible;
            AboutContent.Visibility = Visibility.Collapsed;
            
            // Load settings content
            LoadSettingsContent();
        }

        private void ShowAboutContent()
        {
            TransferContent.Visibility = Visibility.Collapsed;
            ImportExportContent.Visibility = Visibility.Collapsed;
            SettingsContent.Visibility = Visibility.Collapsed;
            AboutContent.Visibility = Visibility.Visible;
        }

        private void LoadSettingsContent()
        {
            // Create settings content inline
            var settingsPanel = CreateSettingsPanel();
            SettingsContentPresenter.Content = settingsPanel;
        }

        private FrameworkElement CreateSettingsPanel()
        {
            var settingsViewModel = new SettingsViewModel(_appSettings, _themeService, _dialogService, _profileService);
            
            var panel = new StackPanel();
            
            // Appearance Section
            panel.Children.Add(CreateSectionHeader("ðŸŽ¨ Appearance"));
            panel.Children.Add(CreateSettingCard("ðŸŒ“ Dark Mode", "Switch between light and dark theme", 
                CreateToggleButton(settingsViewModel, nameof(SettingsViewModel.IsDarkMode))));
            panel.Children.Add(CreateSettingCard("âœ¨ Window Transparency", "Enable acrylic background effect", 
                CreateToggleButton(settingsViewModel, nameof(SettingsViewModel.IsTransparencyEnabled))));
            panel.Children.Add(CreateSettingCard("ðŸ’Ž Glass Effect", "Enable modern glass/liquid glass visual effect", 
                CreateToggleButton(settingsViewModel, nameof(SettingsViewModel.EnableGlassEffect))));
            panel.Children.Add(CreateSettingCard("ðŸŽ¬ Enable Animations", "Turn on/off UI animations", 
                CreateToggleButton(settingsViewModel, nameof(SettingsViewModel.EnableAnimations))));
            
            return panel;
        }

        private TextBlock CreateSectionHeader(string text)
        {
            return new TextBlock
            {
                Text = text,
                FontSize = 20,
                FontWeight = FontWeights.SemiBold,
                Foreground = (Brush)FindResource("PrimaryTextBrush"),
                Margin = new Thickness(0, 0, 0, 16)
            };
        }

        private Border CreateSettingCard(string title, string description, FrameworkElement control)
        {
            var border = new Border
            {
                Background = (Brush)FindResource("CardBackgroundBrush"),
                BorderBrush = (Brush)FindResource("BorderBrush"),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(8),
                Padding = new Thickness(20),
                Margin = new Thickness(0, 0, 0, 12)
            };

            var grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });

            var textPanel = new StackPanel();
            textPanel.Children.Add(new TextBlock
            {
                Text = title,
                FontSize = 16,
                FontWeight = FontWeights.SemiBold,
                Foreground = (Brush)FindResource("PrimaryTextBrush")
            });
            textPanel.Children.Add(new TextBlock
            {
                Text = description,
                FontSize = 13,
                Foreground = (Brush)FindResource("SecondaryTextBrush"),
                Margin = new Thickness(0, 4, 0, 0)
            });

            Grid.SetColumn(textPanel, 0);
            Grid.SetColumn(control, 1);
            
            grid.Children.Add(textPanel);
            grid.Children.Add(control);
            border.Child = grid;

            return border;
        }

        private ToggleButton CreateToggleButton(SettingsViewModel viewModel, string propertyName)
        {
            var toggle = new ToggleButton
            {
                Width = 60,
                Height = 32,
                VerticalAlignment = VerticalAlignment.Center,
                Style = (Style)FindResource("AnimatedToggleButtonStyle")
            };

            var binding = new Binding(propertyName)
            {
                Source = viewModel,
                Mode = BindingMode.TwoWay
            };
            toggle.SetBinding(ToggleButton.IsCheckedProperty, binding);

            return toggle;
        }

        private void OnGitHubClick(object sender, RoutedEventArgs e)
        {
            try
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "https://github.com/rohang1411/SyncFlow",
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                _dialogService.ShowError($"Could not open GitHub link: {ex.Message}", "Error");
            }
        }
    }
}
